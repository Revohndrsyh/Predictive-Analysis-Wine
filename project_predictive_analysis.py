# -*- coding: utf-8 -*-
"""Project Predictive Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JQWulNERIez_2Exdo8qDnEzqWOn7JIM_

# Import Library
"""

# 1. Import Library
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.svm import SVC
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

"""# Load Dataset"""

df = pd.read_csv('/content/WineQT.csv')
print("Ukuran data:", df.shape)
display(df.head())

print(df.info())
display(df.describe())

"""# Preprocessing: Label Biner (Good/Bad Wine)"""

df.duplicated().sum()

df.isnull().sum()

# Buang kolom Id
df = df.drop('Id', axis=1)

# Kualitas >=7 dianggap 'good' wine, lainnya 'bad'
df['quality_label'] = df['quality'].apply(lambda x: 1 if x >= 7 else 0)
print(df['quality_label'].value_counts())

# Pisahkan fitur dan label
X = df.drop(['quality', 'quality_label'], axis=1)
y = df['quality_label']

"""# Scaling & Split Data

"""

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(
    X_scaled, y, test_size=0.2, random_state=42, stratify=y
)

print("Train:", X_train.shape, "| Test:", X_test.shape)

"""# Membangun Model

"""

models = {
    "Logistic Regression": LogisticRegression(max_iter=1000, random_state=42),
    "Random Forest": RandomForestClassifier(n_estimators=100, random_state=42),
    "SVM": SVC(random_state=42),
    "Gradient Boosting": GradientBoostingClassifier(n_estimators=100, random_state=42)
}

results = []
for name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    acc = accuracy_score(y_test, y_pred)
    report = classification_report(y_test, y_pred, output_dict=True)
    print(f"\n==== {name} ====")
    print("Accuracy:", acc)
    print(classification_report(y_test, y_pred))
    results.append({
        "Model": name,
        "Accuracy": acc,
        "Precision": report['1']['precision'],
        "Recall": report['1']['recall'],
        "F1-score": report['1']['f1-score']
    })

"""## Tabel Perbandingan Hasil Model

"""

results_df = pd.DataFrame(results)
display(results_df)

"""# Feature Importance

"""

for name in ["Random Forest", "Gradient Boosting"]:
    model = models[name]
    importances = model.feature_importances_
    feat_df = pd.DataFrame({
        'Feature': X.columns,
        'Importance': importances
    }).sort_values('Importance', ascending=False)

    plt.figure(figsize=(8,5))
    sns.barplot(x='Importance', y='Feature', data=feat_df)
    plt.title(f"Feature Importance - {name}")
    plt.tight_layout()
    plt.show()

"""## Kesimpulan

Berdasarkan hasil analisis dan pemodelan kualitas wine, dapat disimpulkan sebagai berikut:

1. Dataset yang digunakan bersih dari nilai kosong dan duplikat, sehingga layak untuk dilakukan proses pemodelan.

2. Pendekatan klasifikasi biner dengan mengelompokkan kualitas wine menjadi dua kelas (baik dan buruk) memudahkan proses prediksi dan evaluasi.

3. Model Random Forest dan Gradient Boosting menunjukkan performa terbaik dibandingkan dengan Logistic Regression dan SVM, baik dari segi akurasi maupun metrik evaluasi lain seperti presisi, recall, dan F1-score.

4. Fitur yang paling berpengaruh terhadap prediksi kualitas wine adalah alcohol, volatile acidity, dan sulphates, berdasarkan analisis feature importance pada model berbasis pohon.

Secara keseluruhan, model yang dikembangkan sudah dapat digunakan sebagai alat bantu prediksi kualitas wine dengan tingkat akurasi yang baik dan dapat mendukung pengambilan keputusan di industri wine.

"""